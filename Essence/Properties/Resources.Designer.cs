//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Essence.Properties {
    using System;
    
    
    /// <summary>
    ///   Uma classe de recurso de tipo de alta segurança, para pesquisar cadeias de caracteres localizadas etc.
    /// </summary>
    // Essa classe foi gerada automaticamente pela classe StronglyTypedResourceBuilder
    // através de uma ferramenta como ResGen ou Visual Studio.
    // Para adicionar ou remover um associado, edite o arquivo .ResX e execute ResGen novamente
    // com a opção /str, ou recrie o projeto do VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Retorna a instância de ResourceManager armazenada em cache usada por essa classe.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Essence.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Substitui a propriedade CurrentUICulture do thread atual para todas as
        ///   pesquisas de recursos que usam essa classe de recurso de tipo de alta segurança.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a 
        ///-- Variável global para alternar o script
        ///if _G.AimbotEnabled == nil then
        ///    _G.AimbotEnabled = true
        ///
        ///    -- Variáveis locais para referenciar as configurações globais
        ///    local settings = _G.AimbotSettings
        ///
        ///    -- FOV Circle
        ///    local fovCircle = Drawing.new(&quot;Circle&quot;)
        ///    fovCircle.Visible = false
        ///    fovCircle.Radius = settings.fovRadius
        ///    fovCircle.Color = settings.fovColor
        ///    fovCircle.Thickness = settings.fovThickness
        ///    fovCircle.Position = Vector2.new(workspace.CurrentCamera.Viewp [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string Aimbot {
            get {
                return ResourceManager.GetString("Aimbot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a -- Variável global para alternar o estado do script Boxes
        ///if _G.BoxesEnabled == nil then
        ///    _G.BoxesEnabled = true
        ///
        ///    -- Serviços
        ///    local Players = game:GetService(&quot;Players&quot;)
        ///    local RunService = game:GetService(&quot;RunService&quot;)
        ///    local LocalPlayer = Players.LocalPlayer
        ///    local Camera = workspace.CurrentCamera
        ///
        ///    -- Tabela para armazenar as boxes
        ///    _G.BoxObjects = _G.BoxObjects or {}
        ///
        ///    -- Função para criar uma box
        ///    local function createBox(player)
        ///        if player == LocalP [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string Boxes {
            get {
                return ResourceManager.GetString("Boxes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a 4952+23/02/2025 11:40:14.
        /// </summary>
        internal static string BuildInfos {
            get {
                return ResourceManager.GetString("BuildInfos", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a @echo off
        ///Setlocal EnableDelayedExpansion
        ///Set _RNDLength=2
        ///Set _Alphanumeric=0123456789ABCDEF
        ///Set _Str=%_Alphanumeric%987654321
        ///:_LenLoop
        ///IF NOT &quot;%_Str:~18%&quot;==&quot;&quot; SET _Str=%_Str:~9%&amp; SET /A _Len+=9&amp; GOTO :_LenLoop
        ///SET _tmp=%_Str:~9,1%
        ///SET /A _Len=_Len+_tmp
        ///Set _count=0
        ///SET _RndAlphaNum=
        ///:_loop
        ///Set /a _count+=1
        ///SET _RNDCS=%Random%
        ///Set /A _RNDCS=_RNDCS%%%_Len%
        ///
        ///SET _RNDBS=%Random%
        ///Set /A _RNDBS=_RNDBS%%%_Len%
        ///
        ///SET _RNDPSN=%Random%
        ///Set /A _RNDPSN=_RNDPSN%%%_Len%
        ///
        ///SET _RNDSS=%Random%
        ///Set / [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string ChangeHWIDs {
            get {
                return ResourceManager.GetString("ChangeHWIDs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a .
        /// </summary>
        internal static string ChatBypass {
            get {
                return ResourceManager.GetString("ChatBypass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Last Updated: 08/09/2024
        ///This Terms of Use Agreement (&quot;Agreement&quot;) is between the group (&quot;Essence&quot;) and the user (&quot;User&quot;) of the &quot;Essence&quot; software.
        ///
        ///#1. Data Collection and Encryption:
        ///1.1. By using this application, you agree to the collection of the following information:
        ///   • Roblox ID: Used for identification and authentication purposes.
        ///   • Discord ID: Used for identification and authentication purposes.
        ///   • Machine HWID: Used to ensure account integrity and for security purposes.
        ///1.2. All c [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string Contrato {
            get {
                return ResourceManager.GetString("Contrato", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if _G.EvoClickTP == nil then
        ///	_G.EvoClickTP = true
        ///	
        ///	local player = game:GetService(&quot;Players&quot;).LocalPlayer
        ///	local UserInputService = game:GetService(&quot;UserInputService&quot;)
        ///	local mouse = player:GetMouse()
        ///
        ///	repeat wait() until mouse
        ///	
        ///	UserInputService.InputBegan:Connect(function(input, gameProcessed)
        ///		if input.UserInputType == Enum.UserInputType.MouseButton1 then
        ///
        ///			if _G.EvoClickTP and UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
        ///				player.Character:MoveTo(Vector3.new(mouse.Hit. [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string CtrlTP {
            get {
                return ResourceManager.GetString("CtrlTP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a -- Cloneref support (adds support for JJsploit/Temple/Electron and other sploits that don&apos;t have cloneref or really shit versions of it.)
        ///-- Add cloneref support if the exploit doesn&apos;t have it or if it&apos;s really shit..
        ///
        ///-- Credit to Alex | JJsploit Support
        ///local a=Instance.new(&quot;Part&quot;)for b,c in pairs(getreg())do if type(c)==&quot;table&quot;and#c then if rawget(c,&quot;__mode&quot;)==&quot;kvs&quot;then for d,e in pairs(c)do if e==a then getgenv().InstanceList=c;break end end end end end;local f={}function f.invalidate(g)if not Insta [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string DarkDexV3 {
            get {
                return ResourceManager.GetString("DarkDexV3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta um recurso localizado do tipo System.IO.UnmanagedMemoryStream semelhante a System.IO.MemoryStream.
        /// </summary>
        internal static System.IO.UnmanagedMemoryStream death_sound2 {
            get {
                return ResourceManager.GetStream("death_sound2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a -- Variável global para alternar o estado do script ESP
        ///if _G.EvoEnvESP == nil then
        ///    _G.EvoEnvESP = true
        ///
        ///-- Services
        ///local Players = game:GetService(&quot;Players&quot;)
        ///local RunService = game:GetService(&quot;RunService&quot;)
        ///
        ///-- Function to get the color based on the player&apos;s team
        ///local function getTeamColor(player)
        ///    if player.Team then
        ///        return player.TeamColor.Color
        ///    else
        ///        return Color3.fromRGB(128, 128, 128) -- Gray color for players with no team
        ///    end
        ///end
        ///
        ///-- Function to create [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string ESP {
            get {
                return ResourceManager.GetString("ESP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta um recurso localizado do tipo System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap essence {
            get {
                object obj = ResourceManager.GetObject("essence", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a local player = game.Players.LocalPlayer
        ///local torso = player.Character and player.Character:FindFirstChild(&quot;Torso&quot;)
        ///
        ///if not torso then
        ///    warn(&quot;Player&apos;s torso not found.&quot;)
        ///    return
        ///end
        ///
        ///if getgenv().EvoEnvFly == nil then
        ///    getgenv().EvoEnvFly = true
        ///    local mouse = player:GetMouse()
        ///    local ctrl = {f = 0, b = 0, l = 0, r = 0}
        ///    local lastctrl = {f = 0, b = 0, l = 0, r = 0}
        ///    local maxspeed = 50
        ///    local speed = 0
        ///
        ///    local bg = Instance.new(&quot;BodyGyro&quot;, torso)
        ///    bg.P = 9e4
        /// [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string Fly {
            get {
                return ResourceManager.GetString("Fly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if _G.EvoEnvFPS == nil then
        ///    _G.EvoEnvFPS = true
        ///    print(&quot;FPS aumentado por Essence&quot;)
        ///
        ///    -- Feedback visual para o jogador
        ///    local loadingGui = Instance.new(&quot;ScreenGui&quot;, game.Players.LocalPlayer.PlayerGui)
        ///    local textLabel = Instance.new(&quot;TextLabel&quot;, loadingGui)
        ///    textLabel.Text = &quot;Ajustando configurações para melhorar o desempenho...&quot;
        ///    textLabel.Size = UDim2.new(0.5, 0, 0.1, 0)
        ///    textLabel.Position = UDim2.new(0.25, 0, 0.45, 0)
        ///    textLabel.BackgroundTransparency = 0.5
        ///    te [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string FPS {
            get {
                return ResourceManager.GetString("FPS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta um recurso localizado do tipo System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap hide {
            get {
                object obj = ResourceManager.GetObject("hide", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a local owner = &quot;Upbolt&quot;
        ///local branch = &quot;revision&quot;
        ///
        ///local function webImport(file)
        ///    return loadstring(game:HttpGetAsync((&quot;https://raw.githubusercontent.com/%s/Hydroxide/%s/%s.lua&quot;):format(owner, branch, file)), file .. &apos;.lua&apos;)()
        ///end
        ///
        ///webImport(&quot;init&quot;)
        ///webImport(&quot;ui/main&quot;).
        /// </summary>
        internal static string Hydroxide {
            get {
                return ResourceManager.GetString("Hydroxide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if IY_LOADED and not _G.IY_DEBUG == true then
        ///    -- error(&quot;Infinite Yield is already running!&quot;, 0)
        ///    return
        ///end
        ///
        ///pcall(function() getgenv().IY_LOADED = true end)
        ///
        ///local cloneref = cloneref or function(o) return o end
        ///COREGUI = cloneref(game:GetService(&quot;CoreGui&quot;))
        ///Players = cloneref(game:GetService(&quot;Players&quot;))
        ///
        ///if not game:IsLoaded() then
        ///    local notLoaded = Instance.new(&quot;Message&quot;)
        ///    notLoaded.Parent = COREGUI
        ///    notLoaded.Text = &quot;Infinite Yield is waiting for the game to load&quot;
        ///    gam [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string InfiniteYeld {
            get {
                return ResourceManager.GetString("InfiniteYeld", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a 
        ///print(&quot;\nJumpLK EXECUTED&quot;)
        ///local player = game.Players.LocalPlayer
        ///while not player.Character or not player.Character:FindFirstChild(&quot;Humanoid&quot;) do
        ///    wait()
        ///end
        ///
        ///if _G.EvoEnvJumpLock == nil then
        ///    _G.EvoEnvJumpLock = true
        ///
        ///    local humanoid = player.character:WaitForChild(&quot;Humanoid&quot;)
        ///
        ///    while _G.EvoEnvJumpLock do
        ///        humanoid.JumpPower = 69
        ///        wait(0.01)
        ///    end
        ///
        ///else
        ///    _G.EvoEnvJumpLock = nil
        ///end
        ///.
        /// </summary>
        internal static string JumpLock {
            get {
                return ResourceManager.GetString("JumpLock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a local CoreGui = game:GetService(&quot;CoreGui&quot;)
        ///
        ///-- Função para verificar se uma propriedade contém &quot;SAVAGE&quot;
        ///local function containsSavage(object)
        ///    -- Verifica se o objeto tem uma propriedade &apos;Text&apos; (para objetos de GUI, como TextLabel, TextButton, etc.)
        ///    if object:IsA(&quot;TextButton&quot;) or object:IsA(&quot;TextLabel&quot;) or object:IsA(&quot;TextBox&quot;) then
        ///        local success, value = pcall(function()
        ///            return object.Text
        ///        end)
        ///        if success and typeof(value) == &quot;string&quot; and string.find(valu [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string loadazure {
            get {
                return ResourceManager.GetString("loadazure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta um recurso localizado do tipo System.Byte[].
        /// </summary>
        internal static byte[] lua {
            get {
                object obj = ResourceManager.GetObject("lua", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a local player = game.Players.LocalPlayer
        ///while not player.Character do
        ///    wait()
        ///end
        ///
        ///
        ///if _G.EvoEnvClip == nil then
        ///    _G.EvoEnvClip = true
        ///
        ///    local function ApplyNoclip()
        ///        if _G.EvoEnvClip then
        ///            for i, v in pairs(player.Character:GetChildren()) do
        ///                if v:IsA(&quot;BasePart&quot;) then
        ///                    v.CanCollide = false
        ///                end
        ///            end
        ///        end
        ///    end
        ///
        ///    local function UpdateNoclip()
        ///        ApplyNoclip()
        ///    end
        ///
        ///    game:GetSe [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string noclip {
            get {
                return ResourceManager.GetString("noclip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a local ts = game:GetService(&quot;TeleportService&quot;)
        ///local p = game:GetService(&quot;Players&quot;).LocalPlayer
        ///ts:Teleport(game.PlaceId, p)
        ///.
        /// </summary>
        internal static string Rejoin {
            get {
                return ResourceManager.GetString("Rejoin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta um recurso localizado do tipo System.Byte[].
        /// </summary>
        internal static byte[] SaturationEffect {
            get {
                object obj = ResourceManager.GetObject("SaturationEffect", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a TeleportService = cloneref(game:GetService(&quot;TeleportService&quot;))
        ///httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
        ///local servers = {}
        ///local req = httprequest({Url = string.format(&quot;https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&amp;limit=100&amp;excludeFullGames=true&quot;, PlaceId)})
        ///local body = HttpService:JSONDecode(req.Body)
        ///
        ///if body and body.data then
        ///    for i, v in next, body.data do
        ///        if type(v) == &quot;table&quot; and  [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string ServerHop {
            get {
                return ResourceManager.GetString("ServerHop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta um recurso localizado do tipo System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap show {
            get {
                object obj = ResourceManager.GetObject("show", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a local function modifyProperty(lockName, propertyName, value)
        ///    if _G[lockName] == nil then
        ///        _G[lockName] = true
        ///
        ///        spawn(function()
        ///            while _G[lockName] do
        ///                game.Players.LocalPlayer.Character:WaitForChild(&quot;Humanoid&quot;)[propertyName] = value
        ///                wait(0.01)
        ///            end
        ///            print(&quot;while break&quot;)
        ///        end)
        ///
        ///    else
        ///        _G[lockName] = nil
        ///    end
        ///end
        ///
        ///if 777 ~= 776 + 1 then
        ///    print(&quot;WALKSPEED&quot;)
        ///    modifyProperty(&quot;EvoEnvSpe [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string SpeedLock {
            get {
                return ResourceManager.GetString("SpeedLock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta um recurso localizado do tipo System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap star1 {
            get {
                object obj = ResourceManager.GetObject("star1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Consulta um recurso localizado do tipo System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap star2 {
            get {
                object obj = ResourceManager.GetObject("star2", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a 
        ///for i,v in pairs(game:GetService(&quot;Players&quot;):GetPlayers()) do
        ///   if v.Name ~= game.Players.LocalPlayer.Name and player ~= &quot;&quot; then
        ///       if v.Name == player or v.DisplayName == player or v.DisplayName:find(player)  or v.Name:find(player) or v.Name:find(string.upper(string.sub(player,1,1))) or v.Name:find(string.lower(player)) or v.Name:find(string.upper(player))  then
        ///           if v.Character ~= nil and v.Character:FindFirstChild(&quot;HumanoidRootPart&quot;) and game:GetService(&apos;Players&apos;).LocalPlayer.Character  [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string TP {
            get {
                return ResourceManager.GetString("TP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a -- Variável global para alternar o estado do script Tracers
        ///if _G.TracersEnabled == nil then
        ///    _G.TracersEnabled = true
        ///
        ///    -- Serviços
        ///    local Players = game:GetService(&quot;Players&quot;)
        ///    local RunService = game:GetService(&quot;RunService&quot;)
        ///    local LocalPlayer = Players.LocalPlayer
        ///    local Camera = workspace.CurrentCamera
        ///
        ///    -- Tabela para armazenar os tracers
        ///    _G.TracerObjects = _G.TracerObjects or {}
        ///
        ///    -- Função para criar um tracer
        ///    local function createTracer(player)
        ///         [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        internal static string Tracers {
            get {
                return ResourceManager.GetString("Tracers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta um recurso localizado do tipo System.IO.UnmanagedMemoryStream semelhante a System.IO.MemoryStream.
        /// </summary>
        internal static System.IO.UnmanagedMemoryStream wolf1 {
            get {
                return ResourceManager.GetStream("wolf1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta um recurso localizado do tipo System.IO.UnmanagedMemoryStream semelhante a System.IO.MemoryStream.
        /// </summary>
        internal static System.IO.UnmanagedMemoryStream wolf2 {
            get {
                return ResourceManager.GetStream("wolf2", resourceCulture);
            }
        }
    }
}
